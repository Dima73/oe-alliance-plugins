from __future__ import absolute_import
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gbbt', [dirname(__file__)])
        except ImportError:
            from . import _gbbt
            return _gbbt
        if fp is not None:
            try:
                _mod = imp.load_module('_gbbt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gbbt = swig_import_helper()
    del swig_import_helper
else:
    from . import _gbbt
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_gbbt.BT_STATUS_DISABLED_swigconstant(_gbbt)
BT_STATUS_DISABLED = _gbbt.BT_STATUS_DISABLED

_gbbt.BT_STATUS_ENABLED_swigconstant(_gbbt)
BT_STATUS_ENABLED = _gbbt.BT_STATUS_ENABLED

_gbbt.BT_PROFILE_GB_RC_swigconstant(_gbbt)
BT_PROFILE_GB_RC = _gbbt.BT_PROFILE_GB_RC

_gbbt.BT_PROFILE_HID_UNKNOWN_swigconstant(_gbbt)
BT_PROFILE_HID_UNKNOWN = _gbbt.BT_PROFILE_HID_UNKNOWN

_gbbt.BT_PROFILE_KEYBOARD_swigconstant(_gbbt)
BT_PROFILE_KEYBOARD = _gbbt.BT_PROFILE_KEYBOARD

_gbbt.BT_PROFILE_MOUSE_swigconstant(_gbbt)
BT_PROFILE_MOUSE = _gbbt.BT_PROFILE_MOUSE

_gbbt.BT_PROFILE_HEADPHONE_swigconstant(_gbbt)
BT_PROFILE_HEADPHONE = _gbbt.BT_PROFILE_HEADPHONE

_gbbt.BT_PROFILE_SPEAKER_swigconstant(_gbbt)
BT_PROFILE_SPEAKER = _gbbt.BT_PROFILE_SPEAKER

_gbbt.BT_PROFILE_GATT_UNKNOWN_swigconstant(_gbbt)
BT_PROFILE_GATT_UNKNOWN = _gbbt.BT_PROFILE_GATT_UNKNOWN

_gbbt.BT_PROFILE_GATT_HID_swigconstant(_gbbt)
BT_PROFILE_GATT_HID = _gbbt.BT_PROFILE_GATT_HID

_gbbt.BT_EVENT_DEVICE_ADDED_swigconstant(_gbbt)
BT_EVENT_DEVICE_ADDED = _gbbt.BT_EVENT_DEVICE_ADDED

_gbbt.BT_EVENT_SCAN_END_swigconstant(_gbbt)
BT_EVENT_SCAN_END = _gbbt.BT_EVENT_SCAN_END

_gbbt.BT_EVENT_CONNECTED_swigconstant(_gbbt)
BT_EVENT_CONNECTED = _gbbt.BT_EVENT_CONNECTED

_gbbt.BT_EVENT_DISCONNECTED_swigconstant(_gbbt)
BT_EVENT_DISCONNECTED = _gbbt.BT_EVENT_DISCONNECTED

_gbbt.BT_EVENT_PAIRING_SUCCESS_swigconstant(_gbbt)
BT_EVENT_PAIRING_SUCCESS = _gbbt.BT_EVENT_PAIRING_SUCCESS

_gbbt.BT_EVENT_PAIRING_FAIL_swigconstant(_gbbt)
BT_EVENT_PAIRING_FAIL = _gbbt.BT_EVENT_PAIRING_FAIL

_gbbt.BT_EVENT_PAIRING_TIMEOUT_swigconstant(_gbbt)
BT_EVENT_PAIRING_TIMEOUT = _gbbt.BT_EVENT_PAIRING_TIMEOUT

_gbbt.BT_EVENT_PAIRING_WRONG_PIN_swigconstant(_gbbt)
BT_EVENT_PAIRING_WRONG_PIN = _gbbt.BT_EVENT_PAIRING_WRONG_PIN

_gbbt.BT_EVENT_PAIRING_PASSCODE_REQUIRED_swigconstant(_gbbt)
BT_EVENT_PAIRING_PASSCODE_REQUIRED = _gbbt.BT_EVENT_PAIRING_PASSCODE_REQUIRED

_gbbt.BT_EVENT_CONNECT_TIMEOUT_swigconstant(_gbbt)
BT_EVENT_CONNECT_TIMEOUT = _gbbt.BT_EVENT_CONNECT_TIMEOUT

_gbbt.BT_EVENT_REQUEST_AUDIO_CONNECT_swigconstant(_gbbt)
BT_EVENT_REQUEST_AUDIO_CONNECT = _gbbt.BT_EVENT_REQUEST_AUDIO_CONNECT

_gbbt.BT_EVENT_READ_BATTERY_LEVEL_swigconstant(_gbbt)
BT_EVENT_READ_BATTERY_LEVEL = _gbbt.BT_EVENT_READ_BATTERY_LEVEL

_gbbt.BT_EVENT_LINK_DOWN_swigconstant(_gbbt)
BT_EVENT_LINK_DOWN = _gbbt.BT_EVENT_LINK_DOWN

_gbbt.BT_EVENT_NEW_VOICE_swigconstant(_gbbt)
BT_EVENT_NEW_VOICE = _gbbt.BT_EVENT_NEW_VOICE

_gbbt.BT_EVENT_BT_CONNECTED_swigconstant(_gbbt)
BT_EVENT_BT_CONNECTED = _gbbt.BT_EVENT_BT_CONNECTED

_gbbt.BT_EVENT_BT_DISCONNECTED_swigconstant(_gbbt)
BT_EVENT_BT_DISCONNECTED = _gbbt.BT_EVENT_BT_DISCONNECTED

_gbbt.BT_EVENT_BT_VOICE_START_swigconstant(_gbbt)
BT_EVENT_BT_VOICE_START = _gbbt.BT_EVENT_BT_VOICE_START

_gbbt.BT_EVENT_BT_VOICE_STOP_swigconstant(_gbbt)
BT_EVENT_BT_VOICE_STOP = _gbbt.BT_EVENT_BT_VOICE_STOP

_gbbt.BT_EVENT_BT_NO_VOICE_swigconstant(_gbbt)
BT_EVENT_BT_NO_VOICE = _gbbt.BT_EVENT_BT_NO_VOICE

_gbbt.BT_REQUEST_NONE_swigconstant(_gbbt)
BT_REQUEST_NONE = _gbbt.BT_REQUEST_NONE

_gbbt.BT_REQUEST_STARTSCAN_swigconstant(_gbbt)
BT_REQUEST_STARTSCAN = _gbbt.BT_REQUEST_STARTSCAN

_gbbt.BT_REQUEST_ABORTSCAN_swigconstant(_gbbt)
BT_REQUEST_ABORTSCAN = _gbbt.BT_REQUEST_ABORTSCAN

_gbbt.BT_REQUEST_RESETSCAN_swigconstant(_gbbt)
BT_REQUEST_RESETSCAN = _gbbt.BT_REQUEST_RESETSCAN

_gbbt.BT_REQUEST_PAIRING_swigconstant(_gbbt)
BT_REQUEST_PAIRING = _gbbt.BT_REQUEST_PAIRING

_gbbt.BT_REQUEST_CANCELPAIRING_swigconstant(_gbbt)
BT_REQUEST_CANCELPAIRING = _gbbt.BT_REQUEST_CANCELPAIRING

_gbbt.BT_REQUEST_REMOVEPAIRING_swigconstant(_gbbt)
BT_REQUEST_REMOVEPAIRING = _gbbt.BT_REQUEST_REMOVEPAIRING

_gbbt.BT_REQUEST_CONNECT_swigconstant(_gbbt)
BT_REQUEST_CONNECT = _gbbt.BT_REQUEST_CONNECT

_gbbt.BT_REQUEST_DISCONNECT_swigconstant(_gbbt)
BT_REQUEST_DISCONNECT = _gbbt.BT_REQUEST_DISCONNECT
class Gb_PyBluetooth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gb_PyBluetooth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Gb_PyBluetooth, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bt_status"] = _gbbt.Gb_PyBluetooth_bt_status_set
    __swig_getmethods__["bt_status"] = _gbbt.Gb_PyBluetooth_bt_status_get
    if _newclass:
        bt_status = _swig_property(_gbbt.Gb_PyBluetooth_bt_status_get, _gbbt.Gb_PyBluetooth_bt_status_set)
    __swig_setmethods__["event_callback_"] = _gbbt.Gb_PyBluetooth_event_callback__set
    __swig_getmethods__["event_callback_"] = _gbbt.Gb_PyBluetooth_event_callback__get
    if _newclass:
        event_callback_ = _swig_property(_gbbt.Gb_PyBluetooth_event_callback__get, _gbbt.Gb_PyBluetooth_event_callback__set)
    __swig_setmethods__["ble_event_callback_"] = _gbbt.Gb_PyBluetooth_ble_event_callback__set
    __swig_getmethods__["ble_event_callback_"] = _gbbt.Gb_PyBluetooth_ble_event_callback__get
    if _newclass:
        ble_event_callback_ = _swig_property(_gbbt.Gb_PyBluetooth_ble_event_callback__get, _gbbt.Gb_PyBluetooth_ble_event_callback__set)

    def __init__(self):
        this = _gbbt.new_Gb_PyBluetooth()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _gbbt.delete_Gb_PyBluetooth
    __del__ = lambda self: None

    def init(self):
        return _gbbt.Gb_PyBluetooth_init(self)

    def deinit(self):
        return _gbbt.Gb_PyBluetooth_deinit(self)

    def enable(self):
        return _gbbt.Gb_PyBluetooth_enable(self)

    def disable(self):
        return _gbbt.Gb_PyBluetooth_disable(self)

    def checkBTUSB(self):
        return _gbbt.Gb_PyBluetooth_checkBTUSB(self)

    def getStatus(self):
        return _gbbt.Gb_PyBluetooth_getStatus(self)

    def startScan(self, scan_flag, isBle):
        return _gbbt.Gb_PyBluetooth_startScan(self, scan_flag, isBle)

    def StartScanTestMode(self):
        return _gbbt.Gb_PyBluetooth_StartScanTestMode(self)

    def abortScan(self):
        return _gbbt.Gb_PyBluetooth_abortScan(self)

    def resetScan(self):
        return _gbbt.Gb_PyBluetooth_resetScan(self)

    def addEventCallback(self, callback):
        return _gbbt.Gb_PyBluetooth_addEventCallback(self, callback)

    def removeEventCallback(self):
        return _gbbt.Gb_PyBluetooth_removeEventCallback(self)

    def addBleEventCallback(self, callback):
        return _gbbt.Gb_PyBluetooth_addBleEventCallback(self, callback)

    def removeBleEventCallback(self):
        return _gbbt.Gb_PyBluetooth_removeBleEventCallback(self)

    def getSystemInfo(self):
        return _gbbt.Gb_PyBluetooth_getSystemInfo(self)

    def getDiscDevice(self):
        return _gbbt.Gb_PyBluetooth_getDiscDevice(self)

    def getPairedDevice(self):
        return _gbbt.Gb_PyBluetooth_getPairedDevice(self)

    def requestPairing(self, mac):
        return _gbbt.Gb_PyBluetooth_requestPairing(self, mac)

    def cancelPairing(self, mac):
        return _gbbt.Gb_PyBluetooth_cancelPairing(self, mac)

    def removePairing(self, mac):
        return _gbbt.Gb_PyBluetooth_removePairing(self, mac)

    def removePairedList(self, mac):
        return _gbbt.Gb_PyBluetooth_removePairedList(self, mac)

    def requestSendPincode(self, mac, pincode):
        return _gbbt.Gb_PyBluetooth_requestSendPincode(self, mac, pincode)

    def requestConnect(self, mac):
        return _gbbt.Gb_PyBluetooth_requestConnect(self, mac)

    def requestDisconnect(self, mac):
        return _gbbt.Gb_PyBluetooth_requestDisconnect(self, mac)

    def requestBLEConnect(self):
        return _gbbt.Gb_PyBluetooth_requestBLEConnect(self)

    def requestBLEDisconnect(self):
        return _gbbt.Gb_PyBluetooth_requestBLEDisconnect(self)

    def setDisCoverable(self):
        return _gbbt.Gb_PyBluetooth_setDisCoverable(self)

    def playAudioDevice(self, mac):
        return _gbbt.Gb_PyBluetooth_playAudioDevice(self, mac)

    def stopAudioDevice(self):
        return _gbbt.Gb_PyBluetooth_stopAudioDevice(self)

    def setScanTime(self):
        return _gbbt.Gb_PyBluetooth_setScanTime(self)

    def setVolume(self, volume):
        return _gbbt.Gb_PyBluetooth_setVolume(self, volume)

    def resetSearchedDevices(self):
        return _gbbt.Gb_PyBluetooth_resetSearchedDevices(self)

    def setVoiceCheckDB(self, value):
        return _gbbt.Gb_PyBluetooth_setVoiceCheckDB(self, value)

    def isVoiceRecording(self):
        return _gbbt.Gb_PyBluetooth_isVoiceRecording(self)

    def cleanupBleClient(self):
        return _gbbt.Gb_PyBluetooth_cleanupBleClient(self)

    def readBatteryLevel(self):
        return _gbbt.Gb_PyBluetooth_readBatteryLevel(self)

    def updateBatteryLevel(self):
        return _gbbt.Gb_PyBluetooth_updateBatteryLevel(self)

    def OTA_addEventCallback(self, callback):
        return _gbbt.Gb_PyBluetooth_OTA_addEventCallback(self, callback)

    def OTA_removeEventCallback(self):
        return _gbbt.Gb_PyBluetooth_OTA_removeEventCallback(self)

    def OTAInit(self):
        return _gbbt.Gb_PyBluetooth_OTAInit(self)

    def OTADeInit(self):
        return _gbbt.Gb_PyBluetooth_OTADeInit(self)

    def OTAStart(self):
        return _gbbt.Gb_PyBluetooth_OTAStart(self)

    def OTAStop(self):
        return _gbbt.Gb_PyBluetooth_OTAStop(self)

    def OTACheckFWVersion(self):
        return _gbbt.Gb_PyBluetooth_OTACheckFWVersion(self)

    def CheckStatus(self):
        return _gbbt.Gb_PyBluetooth_CheckStatus(self)

    def isMaxBLEPairedDevice(self):
        return _gbbt.Gb_PyBluetooth_isMaxBLEPairedDevice(self)
Gb_PyBluetooth_swigregister = _gbbt.Gb_PyBluetooth_swigregister
Gb_PyBluetooth_swigregister(Gb_PyBluetooth)

# This file is compatible with both classic and new-style classes.


